name: CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

env:
  PYTHON_VERSION: '3.9'
  POETRY_VERSION: '1.4.2'

jobs:
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black==23.3.0 flake8==6.0.0 isort==5.12.0 mypy==1.3.0 pylint==2.17.3 bandit==1.7.5
        pip install -r requirements.txt

    - name: Run black
      run: |
        black . --check --diff || (echo "Please run 'black .' to format your code" && exit 1)

    - name: Run flake8
      run: |
        flake8 . --count --show-source --statistics || (echo "Please fix the flake8 issues" && exit 1)

    - name: Run isort
      run: |
        isort . --check-only --diff || (echo "Please run 'isort .' to sort your imports" && exit 1)

    - name: Run mypy
      run: |
        mypy . || (echo "Please fix type hints according to mypy" && exit 1)

    - name: Run pylint
      continue-on-error: true
      run: |
        pylint **/*.py || echo "Pylint checks completed with warnings"

    - name: Run bandit
      run: |
        bandit -r . -c pyproject.toml || (echo "Please fix security issues found by bandit" && exit 1)

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety==2.3.5 bandit==1.7.5

    - name: Check dependencies for known vulnerabilities
      continue-on-error: true
      run: |
        safety check || echo "Safety checks completed with warnings"

    - name: Run security linter
      run: |
        bandit -r . -c pyproject.toml || (echo "Please fix security issues found by bandit" && exit 1)

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10']

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest==7.4.3 pytest-cov==4.1.0 pytest-asyncio==0.21.1 httpx==0.24.1
        pip install -r requirements.txt

    - name: Run tests with coverage
      env:
        JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        VALID_API_KEY: ${{ secrets.VALID_API_KEY }}
      run: |
        pytest --cov=. --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  build-and-push:
    name: Build and Push Docker Image
    needs: [code-quality, security-scan, test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
    - uses: actions/checkout@v3

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/automl-api:latest,${{ secrets.DOCKERHUB_USERNAME }}/automl-api:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/automl-api:latest
        cache-to: type=inline

  deploy:
    name: Deploy
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
    - name: Deploy to production
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd /opt/automl-api
          docker-compose pull
          docker-compose up -d
          
